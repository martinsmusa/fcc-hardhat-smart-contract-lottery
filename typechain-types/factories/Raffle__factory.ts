/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Raffle, RaffleInterface } from "../Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughEthEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailedError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "enum RaffleState",
        name: "raffleState",
        type: "uint8",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winnerPicked",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b5060405162001f4138038062001f4183398181016040528101906200003891906200039f565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506200008d674ce76b9f80540bbe60c01b6200023660201b60201c565b620000a967dc3c3e37ea75a44d60c01b6200023660201b60201c565b8460a08181525050620000cd67635b7cd0ae79d5d160c01b6200023660201b60201c565b8573ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1660601b8152505062000121674492f482f915ed5e60c01b6200023660201b60201c565b8360c081815250506200014567d460b4a9c743b99e60c01b6200023660201b60201c565b8267ffffffffffffffff1660e08167ffffffffffffffff1660c01b8152505062000180676a0bb273ba7e6bbb60c01b6200023660201b60201c565b8163ffffffff166101008163ffffffff1660e01b81525050620001b467e7ac7937fe076b2860c01b6200023660201b60201c565b6000600360006101000a81548160ff02191690836001811115620001dd57620001dc6200043b565b5b0217905550620001fe678a915d5fee057d5960c01b6200023660201b60201c565b426002819055506200022167b07214d517a6230c60c01b6200023660201b60201c565b8061012081815250505050505050506200046a565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026b826200023e565b9050919050565b6200027d816200025e565b81146200028957600080fd5b50565b6000815190506200029d8162000272565b92915050565b6000819050919050565b620002b881620002a3565b8114620002c457600080fd5b50565b600081519050620002d881620002ad565b92915050565b6000819050919050565b620002f381620002de565b8114620002ff57600080fd5b50565b6000815190506200031381620002e8565b92915050565b600067ffffffffffffffff82169050919050565b620003388162000319565b81146200034457600080fd5b50565b60008151905062000358816200032d565b92915050565b600063ffffffff82169050919050565b62000379816200035e565b81146200038557600080fd5b50565b60008151905062000399816200036e565b92915050565b60008060008060008060c08789031215620003bf57620003be62000239565b5b6000620003cf89828a016200028c565b9650506020620003e289828a01620002c7565b9550506040620003f589828a0162000302565b94505060606200040889828a0162000347565b93505060806200041b89828a0162000388565b92505060a06200042e89828a01620002c7565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160e05160c01c6101005160e01c610120516101405160601c611a5b620004e66000396000610800015260008181610a7d0152610bdf015260006108800152600061085d0152600061083c0152600081816102ba015261042f01526000818161033301526103870152611a5b6000f3fe60806040526004361061009c5760003560e01c8063473f1ddc11610064578063473f1ddc146101535780636e04ff0d1461017e57806391ad27b4146101bc578063c1c244e8146101e7578063e55ae4e814610212578063fd6673f51461024f5761009c565b806309bc33a7146100a1578063115cbaf5146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190611172565b60405180910390f35b3480156100d857600080fd5b506100e16102de565b6040516100ee9190611204565b60405180910390f35b34801561010357600080fd5b5061011e600480360381019061011991906113b8565b610331565b005b6101286103f1565b005b34801561013657600080fd5b50610151600480360381019061014c919061146f565b61068c565b005b34801561015f57600080fd5b50610168610970565b60405161017591906114fd565b60405180910390f35b34801561018a57600080fd5b506101a560048036038101906101a091906115cd565b6109d6565b6040516101b39291906116b9565b60405180910390f35b3480156101c857600080fd5b506101d1610b9f565b6040516101de9190611172565b60405180910390f35b3480156101f357600080fd5b506101fc610c03565b6040516102099190611172565b60405180910390f35b34801561021e57600080fd5b50610239600480360381019061023491906116e9565b610c49565b60405161024691906114fd565b60405180910390f35b34801561025b57600080fd5b50610264610ccd565b6040516102719190611172565b60405180910390f35b6000610290675423f41bbeb5851c60c01b610d16565b6102a467e1920db09b51400d60c01b610d16565b6102b86772cc957fa14711a060c01b610d16565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60006102f46734548557130d44ff60c01b610d16565b610308679a442246fcbe5f5d60c01b610d16565b61031c67b9d42c7a8b146c4060c01b610d16565b600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103da929190611716565b60405180910390fd5b6103ed8282610d19565b5050565b61040567bcd0aafe63249f9160c01b610d16565b61041967dd2f77e34bdee20f60c01b610d16565b61042d674d99f8ce71ac90dc60c01b610d16565b7f00000000000000000000000000000000000000000000000000000000000000003410156104af5761046967833e93febd9dc8ab60c01b610d16565b61047d67b1377c07aca18d3860c01b610d16565b6040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104c36767d910c46c32351560c01b610d16565b6104d7678f82e883cb9f848160c01b610d16565b6104eb67f81b7f1dfaa18ca760c01b610d16565b600060018111156104ff576104fe61118d565b5b600360009054906101000a900460ff1660018111156105215761052061118d565b5b146105805761053a679002042eaa0aae4760c01b610d16565b61054e6722a4dbd7f2a2f04260c01b610d16565b6040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61059467b3dc261700a04ddf60c01b610d16565b6105a86796bcc950ac1c416360c01b610d16565b6105bc67c578f8dd8410f61f60c01b610d16565b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610633677fdec8e8ff1eee2160c01b610d16565b6106476781e53c2b97a49e8f60c01b610d16565b3373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6106a0670a833a2f3946ce8860c01b610d16565b6106b467081604364fe43bfa60c01b610d16565b6106c867d419358e7ae25d4a60c01b610d16565b60006106e2604051806020016040528060008152506109d6565b5090506106f96702c24dbd944cf5a360c01b610d16565b61070d672b055ccab4a12a0360c01b610d16565b806107815761072667ff2e59a556a0d53a60c01b610d16565b61073a670f357e809dae5a1c60c01b610d16565b4760008054905060006040517fab3439a70000000000000000000000000000000000000000000000000000000081526004016107789392919061173f565b60405180910390fd5b61079567e1bc7a06a7d79b0460c01b610d16565b6107a967f9773ac71b32f53760c01b610d16565b6001600360006101000a81548160ff021916908360018111156107cf576107ce61118d565b5b02179055506107e867a03a4ac3dc47154c60c01b610d16565b6107fc67d2588d0319f8faaa60c01b610d16565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016108c1959493929190611858565b602060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091391906118c0565b90506109296735dddce5f56a184460c01b610d16565b61093d6790e9d6fbba02f1f460c01b610d16565b807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000610986670e2c41dfb8b81ed360c01b610d16565b61099a67a8195d5f55af66cd60c01b610d16565b6109ae67a646bc40dd41e3fe60c01b610d16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060606109ee67dfe867ad6455780b60c01b610d16565b610a026777140c2b6d0c273d60c01b610d16565b610a166794b2d5a106c6fc9d60c01b610d16565b6000600360009054906101000a900460ff166001811115610a3a57610a3961118d565b5b60006001811115610a4e57610a4d61118d565b5b149050610a65670b1b52c0335e609960c01b610d16565b610a796771fc43e4cca02c3460c01b610d16565b60007f000000000000000000000000000000000000000000000000000000000000000060025442610aaa919061191c565b119050610ac167cd8a2eca2823eef860c01b610d16565b610ad5677dbabada8a696fd060c01b610d16565b600080600080549050119050610af5670bd9e5e43bcc730160c01b610d16565b610b09674659704b3f3b0f3760c01b610d16565b60008047119050610b24672e2289ed1a43ee5760c01b610d16565b610b38674b2ae473434a488360c01b610d16565b6000848015610b445750835b8015610b4d5750825b8015610b565750815b9050610b6c6764ecbe384ce83dd560c01b610d16565b610b80678d529099bad7d24a60c01b610d16565b8060405180602001604052806000815250965096505050505050915091565b6000610bb567d08e386def3d34da60c01b610d16565b610bc9678fa2c97bd39bcc2060c01b610d16565b610bdd6757f648d15f75193060c01b610d16565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b6000610c19676316c12ffe0137fb60c01b610d16565b610c2d67bcf6ab817ef85cf060c01b610d16565b610c41671c6f474e1e9b6b5860c01b610d16565b600254905090565b6000610c5f6719b538724810bc1d60c01b610d16565b610c73679b6be90e802e4a8a60c01b610d16565b610c8767319ccc1f5b739d8560c01b610d16565b60008281548110610c9b57610c9a611950565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610ce3677c958cf7d4af213060c01b610d16565b610cf76726ba41f629a0bc6b60c01b610d16565b610d0b67f51529fcc2dfc28460c01b610d16565b600080549050905090565b50565b610d2d679ea417ddab1e0dc060c01b610d16565b610d4167816ceeb58beae84760c01b610d16565b610d5567c9a775a67d9f6c7c60c01b610d16565b6000808054905082600081518110610d7057610d6f611950565b5b6020026020010151610d8291906119ae565b9050610d9867a2b0e2239d35200d60c01b610d16565b610dac67e466f4742ec7f95460c01b610d16565b6000808281548110610dc157610dc0611950565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610e026756f5f34770d57fff60c01b610d16565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e5767695b34add28d76b160c01b610d16565b6000600360006101000a81548160ff02191690836001811115610e7d57610e7c61118d565b5b0217905550610e96674dc6c4d207047b7360c01b610d16565b42600281905550610eb16703b8d3bf2393b96360c01b610d16565b600067ffffffffffffffff811115610ecc57610ecb611275565b5b604051908082528060200260200182016040528015610efa5781602001602082028036833780820191505090505b5060009080519060200190610f109291906110b2565b50610f25672443c2d47632d05160c01b610d16565b610f3967c1784a3b3e07ece760c01b610d16565b60008173ffffffffffffffffffffffffffffffffffffffff1647604051610f5f90611a10565b60006040518083038185875af1925050503d8060008114610f9c576040519150601f19603f3d011682016040523d82523d6000602084013e610fa1565b606091505b50509050610fb967fd7979abc5ef858160c01b610d16565b610fcd674120b7f2fa0b2bec60c01b610d16565b8061102c57610fe6676c1e13e39a3d09fd60c01b610d16565b610ffa67e66f1cf918c30d2160c01b610d16565b6040517fa81eb72c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61104067f6b2d6cc26382a9960c01b610d16565b6110546773ec8da762eb715a60c01b610d16565b61106867c552b28eacb149cb60c01b610d16565b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b82805482825590600052602060002090810192821561112b579160200282015b8281111561112a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906110d2565b5b509050611138919061113c565b5090565b5b8082111561115557600081600090555060010161113d565b5090565b6000819050919050565b61116c81611159565b82525050565b60006020820190506111876000830184611163565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106111cd576111cc61118d565b5b50565b60008190506111de826111bc565b919050565b60006111ee826111d0565b9050919050565b6111fe816111e3565b82525050565b600060208201905061121960008301846111f5565b92915050565b6000604051905090565b600080fd5b600080fd5b61123c81611159565b811461124757600080fd5b50565b60008135905061125981611233565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112ad82611264565b810181811067ffffffffffffffff821117156112cc576112cb611275565b5b80604052505050565b60006112df61121f565b90506112eb82826112a4565b919050565b600067ffffffffffffffff82111561130b5761130a611275565b5b602082029050602081019050919050565b600080fd5b600061133461132f846112f0565b6112d5565b905080838252602082019050602084028301858111156113575761135661131c565b5b835b81811015611380578061136c888261124a565b845260208401935050602081019050611359565b5050509392505050565b600082601f83011261139f5761139e61125f565b5b81356113af848260208601611321565b91505092915050565b600080604083850312156113cf576113ce611229565b5b60006113dd8582860161124a565b925050602083013567ffffffffffffffff8111156113fe576113fd61122e565b5b61140a8582860161138a565b9150509250929050565b600080fd5b60008083601f84011261142f5761142e61125f565b5b8235905067ffffffffffffffff81111561144c5761144b611414565b5b6020830191508360018202830111156114685761146761131c565b5b9250929050565b6000806020838503121561148657611485611229565b5b600083013567ffffffffffffffff8111156114a4576114a361122e565b5b6114b085828601611419565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114e7826114bc565b9050919050565b6114f7816114dc565b82525050565b600060208201905061151260008301846114ee565b92915050565b600080fd5b600067ffffffffffffffff82111561153857611537611275565b5b61154182611264565b9050602081019050919050565b82818337600083830152505050565b600061157061156b8461151d565b6112d5565b90508281526020810184848401111561158c5761158b611518565b5b61159784828561154e565b509392505050565b600082601f8301126115b4576115b361125f565b5b81356115c484826020860161155d565b91505092915050565b6000602082840312156115e3576115e2611229565b5b600082013567ffffffffffffffff8111156116015761160061122e565b5b61160d8482850161159f565b91505092915050565b60008115159050919050565b61162b81611616565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561166b578082015181840152602081019050611650565b8381111561167a576000848401525b50505050565b600061168b82611631565b611695818561163c565b93506116a581856020860161164d565b6116ae81611264565b840191505092915050565b60006040820190506116ce6000830185611622565b81810360208301526116e08184611680565b90509392505050565b6000602082840312156116ff576116fe611229565b5b600061170d8482850161124a565b91505092915050565b600060408201905061172b60008301856114ee565b61173860208301846114ee565b9392505050565b60006060820190506117546000830186611163565b6117616020830185611163565b61176e60408301846111f5565b949350505050565b6000819050919050565b61178981611776565b82525050565b600067ffffffffffffffff82169050919050565b6117ac8161178f565b82525050565b600060ff82169050919050565b600061ffff82169050919050565b6000819050919050565b60006117f26117ed6117e8846117b2565b6117cd565b6117bf565b9050919050565b611802816117d7565b82525050565b600063ffffffff82169050919050565b61182181611808565b82525050565b600061184261183d611838846117b2565b6117cd565b611808565b9050919050565b61185281611827565b82525050565b600060a08201905061186d6000830188611780565b61187a60208301876117a3565b61188760408301866117f9565b6118946060830185611818565b6118a16080830184611849565b9695505050505050565b6000815190506118ba81611233565b92915050565b6000602082840312156118d6576118d5611229565b5b60006118e4848285016118ab565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061192782611159565b915061193283611159565b925082821015611945576119446118ed565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119b982611159565b91506119c483611159565b9250826119d4576119d361197f565b5b828206905092915050565b600081905092915050565b50565b60006119fa6000836119df565b9150611a05826119ea565b600082019050919050565b6000611a1b826119ed565b915081905091905056fea2646970667358221220d8766da0b23b1393a159672a3ea61cac4875bc1e04b9fad85dd3a2581fd3e8e164736f6c63430008080033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Raffle";
  }

  deploy(
    vrfCoordinator: string,
    entranceFee: BigNumberish,
    keyHash: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinator,
      entranceFee,
      keyHash,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Raffle>;
  }
  getDeployTransaction(
    vrfCoordinator: string,
    entranceFee: BigNumberish,
    keyHash: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinator,
      entranceFee,
      keyHash,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }
  static readonly contractName: "Raffle";
  public readonly contractName: "Raffle";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
